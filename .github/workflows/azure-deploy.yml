name: Deploy to Azure

on:
  push:
    branches:
      - main
      - 'feature/**'
  workflow_dispatch:

env:
  NODE_VERSION: '22'
  AZURE_RESOURCE_GROUP: rg-email-agent
  AZURE_LOCATION: eastus
  AZURE_SUBSCRIPTION_ID: d33edd77-3a20-49e3-8dbd-93f0344b235e
  AZURE_TENANT_ID: 19683f98-b1bc-402c-a9d1-0166ef1607f9
  AZURE_CLIENT_ID: 7935b2f7-5669-4031-b48b-77db934d8b1c

  # Linux Function App (primary)
  AZURE_FUNCTION_APP_NAME: func-email-agent-9956-lx
  FUNCTION_APP_URL: https://func-email-agent-9956-lx.azurewebsites.net

jobs:
  deploy-functions:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Functions dependencies
        run: |
          cd apps/functions
          npm ci

      - name: Build Functions
        run: |
          cd apps/functions
          npm run build

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Configure Function App settings
        run: |
          # Standard settings for Linux Consumption plan
          az functionapp config appsettings set \
            --name ${{ env.AZURE_FUNCTION_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --settings \
              AzureWebJobsFeatureFlags=EnableWorkerIndexing \
              FUNCTIONS_EXTENSION_VERSION=~4 \
              FUNCTIONS_WORKER_RUNTIME=node

      - name: Set Node.js version for Linux Consumption
        run: |
          # For Linux Consumption plans, set linuxFxVersion via REST API
          echo "Setting linuxFxVersion to Node|22..."
          az rest --method PATCH \
            --uri "/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.Web/sites/${{ env.AZURE_FUNCTION_APP_NAME }}/config/web?api-version=2023-01-01" \
            --body '{"properties":{"linuxFxVersion":"Node|22"}}'

      - name: Restart Function App to apply settings
        run: |
          az functionapp restart \
            --name ${{ env.AZURE_FUNCTION_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

          # Wait for restart to complete
          echo "Waiting 30 seconds for function app to restart..."
          sleep 30

      - name: Package Functions app (zip)
        run: |
          cd apps/functions
          # Reduce node_modules to production only to keep the artifact lean
          npm prune --omit=dev || npm prune --production
          rm -f ../../functions.zip
          # Zip only what the v4 worker needs: dist, node_modules, package.json, host.json
          zip -r ../../functions.zip dist node_modules package.json host.json
          ls -lah ../../functions.zip

      - name: Deploy Functions (zip deploy)
        run: |
          az functionapp deployment source config-zip \
            --name ${{ env.AZURE_FUNCTION_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --src ./functions.zip \
            --build-remote false \
            --timeout 600

      - name: Verify Functions discovered
        run: |
          echo "Waiting for functions to be indexed..."
          sleep 15

          echo "Listing discovered functions..."
          az functionapp function list \
            --name ${{ env.AZURE_FUNCTION_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} -o table

          CNT=$(az functionapp function list \
            --name ${{ env.AZURE_FUNCTION_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "length(@)")

          echo "Found $CNT functions"

          if [ "$CNT" -eq 0 ]; then
            echo "ERROR: 0 functions discovered after deployment"
            echo "No functions discovered. Skipping live log streaming in CI to avoid blocking."
            echo "Tip: To inspect logs locally, run: az functionapp log stream --name ${{ env.AZURE_FUNCTION_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}"
            exit 1
          fi

          HAS_NYLAS=$(az functionapp function list \
            --name ${{ env.AZURE_FUNCTION_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "[?contains(name, '/nylasUnread')].length(@)" -o tsv)

          if [ "$HAS_NYLAS" -eq 0 ]; then
            echo "ERROR: No app functions discovered (only WarmUp present)"
            exit 1
          fi

          echo "✓ Successfully discovered $CNT functions"

      - name: Warm up function app
        run: |
          echo "Warming up function app by calling root URL..."
          FUNCTION_APP_URL="${{ env.FUNCTION_APP_URL }}"

          # Try to call the root URL to warm up the app
          for i in 1 2 3; do
            echo "Warm-up attempt #$i..."
            curl -s -o /dev/null -w "HTTP Status: %{http_code}\n" "$FUNCTION_APP_URL" || true
            sleep 5
          done

          echo "✓ Function app warm-up complete"

  deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: |
          npm run build
        env:
          VITE_FUNCTIONS_BASE_URL: ${{ env.FUNCTION_APP_URL }}
          VITE_API_BASE: ${{ env.FUNCTION_APP_URL }}

      - name: Deploy to Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "dist"
          output_location: ""
          skip_app_build: true

  configure-cors:
    runs-on: ubuntu-latest
    needs: [deploy-functions, deploy-frontend]
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Configure CORS
        run: |
          # Get Static Web App URL
          SWA_URL=$(az staticwebapp show \
            --name ${{ secrets.AZURE_STATIC_WEB_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "defaultHostname" -o tsv)

          # Add allowed origins: SWA + local dev hosts
          ORIGINS=("https://$SWA_URL" "http://localhost:5175" "http://127.0.0.1:5175")

          for ORIGIN in "${ORIGINS[@]}"; do
            echo "Adding CORS origin: $ORIGIN"
            az functionapp cors add \
              --name ${{ env.AZURE_FUNCTION_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --allowed-origins "$ORIGIN" || true
          done

          echo "CORS configured for: ${ORIGINS[*]}"

  test-endpoints:
    runs-on: ubuntu-latest
    needs: [deploy-functions, configure-cors]
    steps:
      - name: Test Azure Functions endpoints
        run: |
          set -e
          BASE_URL="${{ env.FUNCTION_APP_URL }}"
          echo "Waiting 45 seconds for Function App host to warm up..."
          sleep 45
          echo "Testing endpoints at: $BASE_URL"

          # Test /api/nylas/unread (GET)
          echo "Testing GET /api/nylas/unread..."
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/api/nylas/unread?limit=5")
          if [ "$STATUS" != "400" ] && [ "$STATUS" != "200" ]; then
            echo "ERROR: /api/nylas/unread returned $STATUS (expected 400 or 200)"
            exit 1
          fi
          echo "✓ /api/nylas/unread is accessible (status: $STATUS)"

          # Test /api/nylas/contacts (GET)
          echo "Testing GET /api/nylas/contacts..."
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/api/nylas/contacts?limit=5")
          if [ "$STATUS" != "400" ] && [ "$STATUS" != "200" ]; then
            echo "ERROR: /api/nylas/contacts returned $STATUS (expected 400 or 200)"
            exit 1
          fi
          echo "✓ /api/nylas/contacts is accessible (status: $STATUS)"

          # Test /api/nylas/events (GET)
          echo "Testing GET /api/nylas/events..."
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/api/nylas/events?limit=5")
          if [ "$STATUS" != "400" ] && [ "$STATUS" != "200" ]; then
            echo "ERROR: /api/nylas/events returned $STATUS (expected 400 or 200)"
            exit 1
          fi
          echo "✓ /api/nylas/events is accessible (status: $STATUS)"

          # Test /api/search (POST)
          echo "Testing POST /api/search..."
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -d '{"queries":[{"text":"test"}],"top_k":5}' \
            "$BASE_URL/api/search")
          if [ "$STATUS" != "400" ] && [ "$STATUS" != "200" ] && [ "$STATUS" != "500" ]; then
            echo "ERROR: /api/search returned $STATUS (expected 400, 200, or 500)"
            exit 1
          fi
          echo "✓ /api/search is accessible (status: $STATUS)"

          # Test /api/aggregate (POST)
          echo "Testing POST /api/aggregate..."
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -d '{"metric":"count","group_by":["from_domain"],"top_k":10}' \
            "$BASE_URL/api/aggregate")
          if [ "$STATUS" != "400" ] && [ "$STATUS" != "200" ] && [ "$STATUS" != "500" ]; then
            echo "ERROR: /api/aggregate returned $STATUS (expected 400, 200, or 500)"
            exit 1
          fi
          echo "✓ /api/aggregate is accessible (status: $STATUS)"

          # Test /api/realtime/session (POST)
          echo "Testing POST /api/realtime/session..."
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -d '{}' \
            "$BASE_URL/api/realtime/session")
          if [ "$STATUS" != "400" ] && [ "$STATUS" != "200" ] && [ "$STATUS" != "500" ]; then
            echo "ERROR: /api/realtime/session returned $STATUS (expected 400, 200, or 500)"
            exit 1
          fi
          echo "✓ /api/realtime/session is accessible (status: $STATUS)"

          # Test /api/sync/delta (POST)
          echo "Testing POST /api/sync/delta..."
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -d '{}' \
            "$BASE_URL/api/sync/delta")
          if [ "$STATUS" != "400" ] && [ "$STATUS" != "200" ]; then
            echo "ERROR: /api/sync/delta returned $STATUS (expected 400 or 200)"
            exit 1
          fi
          echo "✓ /api/sync/delta is accessible (status: $STATUS)"

          echo ""
          echo "✅ All endpoint tests passed!"
